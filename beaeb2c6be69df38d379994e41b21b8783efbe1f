Revision: beaeb2c6be69df38d379994e41b21b8783efbe1f
Patch-set: 1
File: /COMMIT_MSG

7:12-7:27
Wed Mar 23 16:26:21 2016 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcf63e9d_64214c88
Bytes: 293
"Buffer overflow" has a very specific meaning in security contexts.  AFAICT there's no buffer overflow here: when the input is too large, atrace safely truncates it.  (Which might cause atrace to unexpected reject inputs, but it doesn't open security holes in the way a buffer overflow would.)

File: cmds/atrace/atrace.cpp

528:4-559:52
Wed Mar 23 16:26:21 2016 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcf63e9d_64530ce4
Bytes: 578
Android support for the C++ standard library has significantly improved since this code was written.  If this code needs to be changed, it should be updated to use C++ string and file I/O classes.  This will let you get rid of the fixed-sized buffer *and* make the code significantly easier to understand.

We have a helper in libbase that should be able to reduce the entire file-reading routine to just a few lines of code:

std::string buf;
if (!android::base::ReadFileToString(k_ftraceFilterPath, &buf)) {
  // log error and return false
}
std::string funcList = "\n" + buf;

528:4-559:52
Tue Apr 12 23:52:34 2016 +0000
Author: Stephane Gasparini <1102448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dcf63e9d_64530ce4
UUID: ebf7badf_661c104f
Bytes: 652
Hi Greg
I may have miss something, however it seems to me that you suggestion does not work with a file that can have a string that is larger than 1024 bytes.

android::base::ReadFileToString uses ReadFdToString do call to ReadFdToString to read from fd for a max of 1024 bytes, at least on M and N code base I have access to.

So I don't see how android::base::ReadFileToString is going to read the big string created by an atrace command that uses wildcards on kernel trace point.

Are you referring to improvements made to ReadFileToString on very recent N release that makes ReadFileToString only limited by memory available when reading a string ?

528:4-559:52
Wed Apr 13 00:24:26 2016 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ebf7badf_661c104f
UUID: ebf7badf_495fe54a
Bytes: 553
android::base::ReadFdToString reads into an internal 1024-byte buffer, but it will keep read()ing and append()ing to the output string as long as the read() call succeeds (https://android.googlesource.com/platform/system/core/+/master/base/file.cpp#43).

AFAICT this has been the case ever since ReadFileToString was exposed through libbase in early 2015.

Are you seeing different behavior in practice?  I just ran a quick test and had no issue fully reading /system/framework/framework-res.apk with ReadFileToString(), which is ~28 MB on my dev board.

528:4-559:52
Wed Apr 13 00:39:38 2016 +0000
Author: Stephane Gasparini <1102448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ebf7badf_495fe54a
UUID: ebf7badf_293149c8
Bytes: 267
I have been busy those weeks and as I'm travelling I have no board to try out this week.
I was just reading code to try to understand what ReadFielToString() is doing. Obviously  I miss something in the code.

So I'll take care of this when back at office (next week)

