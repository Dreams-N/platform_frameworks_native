Revision: d74c2b6488ad458e460090320fab9240e45d2f32
Patch-set: 1
File: libs/binder/Parcel.cpp

1962
Thu Aug 25 17:16:49 2016 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 058256cd_39cc8b90
Bytes: 165
The contract in many of these functions is that the passed in out pointers are not allowed to be NULL.  Is there some reason why this particular function is special?

1962
Fri Aug 26 02:16:21 2016 +0000
Author: Bin Chen <1042518@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 058256cd_39cc8b90
UUID: c5111e9a_44a0ae89
Bytes: 237
I agree with you. Just wondering if we can do better than just crash in case NULL is passed in. Maybe pass by reference can make the contract more explicit and safe? But that won't be an optional now, since it will break the legacy code.

1962
Fri Aug 26 16:05:33 2016 +0000
Author: Christopher Wiley <1057759@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5111e9a_44a0ae89
UUID: e5ac6270_53aa871a
Bytes: 368
This is actually a pretty common pattern:

https://google.github.io/styleguide/cppguide.html#Function_Parameter_Ordering

The idea is that you would never call this function unless you actually wanted to read a Parcelable from the Parcel.  So typically:

  MyParcelable mp;
  status = parcel.readParcelable(&mp);  // Calls the templated wrapper
  if (status != OK) ...

1962
Sat Aug 27 01:06:30 2016 +0000
Author: Bin Chen <1042518@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e5ac6270_53aa871a
UUID: 45144ed4_78bb61b2
Bytes: 391
I was trying to see if can make the code more robust in following case, when the user forget the `if (mp)` checking.

void doSOmethihg(int intput, MyParceable *mp) {
  marshalling the input to parcel
  call the BnSide and get the reply
  if (mp) {
      reply.readParclale(tmp);
  }
}

An example: 
https://android-review.googlesource.com/#/c/263512/1/keystore/IKeystoreService.cpp line 1065

